// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.54.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:collection/collection.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class NanoUsernameRegistration {
  /// Takes as an input a public key. Returns the corresponding username
  /// registration public key, or None if the input public key was invalid.
  Future<U8Array32?> publicKeyUsernameRegistration(
      {required String namespace, required U8Array32 publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPublicKeyUsernameRegistrationConstMeta;

  /// Signs a given message with the given private key, returning the signature.
  Future<U8Array64> signAsUsernameRegistration(
      {required String namespace,
      required U8Array32 privateKey,
      required Uint8List message,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignAsUsernameRegistrationConstMeta;
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;
  U8Array64(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array64.unchecked(Uint8List inner) : super(inner);
  U8Array64.init() : super(Uint8List(arraySize));
}

class NanoUsernameRegistrationImpl implements NanoUsernameRegistration {
  final NanoUsernameRegistrationPlatform _platform;
  factory NanoUsernameRegistrationImpl(ExternalLibrary dylib) =>
      NanoUsernameRegistrationImpl.raw(NanoUsernameRegistrationPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NanoUsernameRegistrationImpl.wasm(FutureOr<WasmModule> module) =>
      NanoUsernameRegistrationImpl(module as ExternalLibrary);
  NanoUsernameRegistrationImpl.raw(this._platform);
  Future<U8Array32?> publicKeyUsernameRegistration(
      {required String namespace, required U8Array32 publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(namespace);
    var arg1 = _platform.api2wire_u8_array_32(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_public_key_username_registration(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_u8_array_32,
      constMeta: kPublicKeyUsernameRegistrationConstMeta,
      argValues: [namespace, publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPublicKeyUsernameRegistrationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "public_key_username_registration",
        argNames: ["namespace", "publicKey"],
      );

  Future<U8Array64> signAsUsernameRegistration(
      {required String namespace,
      required U8Array32 privateKey,
      required Uint8List message,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(namespace);
    var arg1 = _platform.api2wire_u8_array_32(privateKey);
    var arg2 = _platform.api2wire_uint_8_list(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_as_username_registration(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u8_array_64,
      constMeta: kSignAsUsernameRegistrationConstMeta,
      argValues: [namespace, privateKey, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignAsUsernameRegistrationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_as_username_registration",
        argNames: ["namespace", "privateKey", "message"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  U8Array32? _wire2api_opt_u8_array_32(dynamic raw) {
    return raw == null ? null : _wire2api_u8_array_32(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array64 _wire2api_u8_array_64(dynamic raw) {
    return U8Array64(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NanoUsernameRegistrationPlatform
    extends FlutterRustBridgeBase<NanoUsernameRegistrationWire> {
  NanoUsernameRegistrationPlatform(ffi.DynamicLibrary dylib)
      : super(NanoUsernameRegistrationWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_u8_array_32(U8Array32 raw) {
    final ans = inner.new_uint_8_list_0(32);
    ans.ref.ptr.asTypedList(32).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NanoUsernameRegistrationWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NanoUsernameRegistrationWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NanoUsernameRegistrationWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_public_key_username_registration(
    int port_,
    ffi.Pointer<wire_uint_8_list> namespace_,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_public_key_username_registration(
      port_,
      namespace_,
      public_key,
    );
  }

  late final _wire_public_key_username_registrationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_public_key_username_registration');
  late final _wire_public_key_username_registration =
      _wire_public_key_username_registrationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign_as_username_registration(
    int port_,
    ffi.Pointer<wire_uint_8_list> namespace_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_sign_as_username_registration(
      port_,
      namespace_,
      private_key,
      message,
    );
  }

  late final _wire_sign_as_username_registrationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_sign_as_username_registration');
  late final _wire_sign_as_username_registration =
      _wire_sign_as_username_registrationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLong;
